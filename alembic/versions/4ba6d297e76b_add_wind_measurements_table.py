"""Add wind_measurements table

Revision ID: 4ba6d297e76b
Revises: be159ef0d614
Create Date: 2025-05-16 21:35:29.245347

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import table, column
from sqlalchemy import Integer, Float, Date, Time, Enum

# revision identifiers, used by Alembic.
revision: str = '4ba6d297e76b'
down_revision: Union[str, None] = 'be159ef0d614'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

winddirection_enum = postgresql.ENUM(
    'N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW',
    name='winddirection',
    create_type=False
)

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('wind_measurements',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('weather_id', sa.Integer(), nullable=True),
    sa.Column('wind_degree', sa.Integer(), nullable=True),
    sa.Column('wind_kph', sa.Float(), nullable=True),
    sa.Column('wind_direction', winddirection_enum, nullable=True),
    sa.Column('last_updated', sa.Date(), nullable=True),
    sa.Column('sunrise', sa.Time(), nullable=True),
    sa.ForeignKeyConstraint(['weather_id'], ['weather.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    connection = op.get_bind()

    weather = table(
        'weather',
        column('id', Integer),
        column('wind_degree', Integer),
        column('wind_kph', Float),
        column('wind_direction', sa.Enum('N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', name='winddirection')),
        column('last_updated', Date),
        column('sunrise', Time)
    )

    wind_measurements = table(
        'wind_measurements',
        column('id', Integer),
        column('weather_id', Integer),
        column('wind_degree', Integer),
        column('wind_kph', Float),
        column('wind_direction', sa.Enum('N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', name='winddirection')),
        column('last_updated', Date),
        column('sunrise', Time)
    )

    data = connection.execute(sa.select(
        weather.c.id,
        weather.c.wind_degree,
        weather.c.wind_kph,
        weather.c.wind_direction,
        weather.c.last_updated,
        weather.c.sunrise
    )).fetchall()

    for row in data:
        connection.execute(wind_measurements.insert().values(
            weather_id=row.id,
            wind_degree=row.wind_degree,
            wind_kph=row.wind_kph,
            wind_direction=row.wind_direction,
            last_updated=row.last_updated,
            sunrise=row.sunrise
        ))

    with op.batch_alter_table('weather') as batch_op:
        batch_op.drop_column('wind_degree')
        batch_op.drop_column('wind_kph')
        batch_op.drop_column('wind_direction')
        batch_op.drop_column('last_updated')
        batch_op.drop_column('sunrise')

def downgrade() -> None:
    """Downgrade schema."""
    with op.batch_alter_table('weather') as batch_op:
        batch_op.add_column(sa.Column('wind_degree', sa.Integer(), nullable=True))
        batch_op.add_column(sa.Column('wind_kph', sa.Float(), nullable=True))
        batch_op.add_column(sa.Column('wind_direction', winddirection_enum, nullable=True))
        batch_op.add_column(sa.Column('last_updated', sa.Date(), nullable=True))
        batch_op.add_column(sa.Column('sunrise', sa.Time(), nullable=True))

    connection = op.get_bind()

    wind_measurements = table(
        'wind_measurements',
        column('id', Integer),
        column('weather_id', Integer),
        column('wind_degree', Integer),
        column('wind_kph', Float),
        column('wind_direction', sa.Enum('N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', name='winddirection')),
        column('last_updated', Date),
        column('sunrise', Time)
    )

    weather = table(
        'weather',
        column('id', Integer),
        column('wind_degree', Integer),
        column('wind_kph', Float),
        column('wind_direction', sa.Enum('N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW', name='winddirection')),
        column('last_updated', Date),
        column('sunrise', Time)
    )

    data = connection.execute(sa.select(
        wind_measurements.c.weather_id,
        wind_measurements.c.wind_degree,
        wind_measurements.c.wind_kph,
        wind_measurements.c.wind_direction,
        wind_measurements.c.last_updated,
        wind_measurements.c.sunrise
    )).fetchall()

    for row in data:
        connection.execute(weather.update().where(weather.c.id == row.weather_id).values(
            wind_degree=row.wind_degree,
            wind_kph=row.wind_kph,
            wind_direction=row.wind_direction,
            last_updated=row.last_updated,
            sunrise=row.sunrise
        ))

    op.drop_table('wind_measurements')
